private Result<JObject> PerformAction(ActionDto action, Dictionary<string, object> inputData, JObject outputObject)
        {
            var strategyFactory = new ActionStrategyFactory(_engineFunctions);
            IActionStrategy strategy;

            try
            {
                strategy = strategyFactory.CreateStrategy(action.ModificationType.ToString());
            }
            catch (ArgumentException e)
            {
                return Result<JObject>.Failure(e.Message);
            }

            return strategy.Execute(action, inputData, outputObject);
            // if (!string.IsNullOrEmpty(action.TargetProperty))
            // {
            //     JToken targetToken = outputObject.SelectToken(action.TargetProperty);

            //     if (targetToken == null)
            //     {
            //         return Result<JObject>.Failure($"Target field {action.TargetProperty} not found in data.");
            //     }

            //     try
            //     {
            //         switch (action.ModificationType)
            //         {
            //             case ModType.Set:
            //                 if (targetToken.Type == JTokenType.String)
            //                 {
            //                     targetToken.Replace(action.ModificationValue);
            //                 }
            //                 else if (targetToken.Type == JTokenType.Float)
            //                 {
            //                     targetToken.Replace(Convert.ToDouble(action.ModificationValue));
            //                 }
            //                 break;
            //             case ModType.Add:
            //             case ModType.Subtract:
            //             case ModType.Multiply:
            //             case ModType.Divide:
            //                 double targetValue = targetToken.Value<double>();
            //                 double modificationValue = double.Parse(action.ModificationValue);

            //                 switch (action.ModificationType)
            //                 {
            //                     case ModType.Add:
            //                         targetValue += modificationValue;
            //                         break;
            //                     case ModType.Subtract:
            //                         targetValue -= modificationValue;
            //                         break;
            //                     case ModType.Multiply:
            //                         targetValue *= modificationValue;
            //                         break;
            //                     case ModType.Divide:
            //                         targetValue /= modificationValue;
            //                         break;
            //                 }

            //                 if (targetToken.Type == JTokenType.Float)
            //                 {
            //                     targetToken.Replace(Convert.ToDouble(targetValue));
            //                 }
            //                 else
            //                 {
            //                     targetToken.Replace(targetValue);
            //                 }
            //                 break;
            //             case ModType.Expression:
            //                 var variables = new Dictionary<string, FloatingPoint>();

            //                 var start = action.ModificationValue.IndexOf('{');
            //                 while (true)
            //                 {
            //                     int end = action.ModificationValue.IndexOf('}', start);
            //                     if (end == -1)
            //                     {
            //                         return Result<JObject>.Failure("Unmatched bracket in modification value");
            //                     }

            //                     string propertyName = action.ModificationValue.Substring(start + 1, end - start - 1);

            //                     var valueRetrieval = _engineFunctions.GetValueFromDataInput(inputData, propertyName);
            //                     if (!valueRetrieval.IsSuccess) return Result<JObject>.Failure(valueRetrieval.Error);

            //                     var propertyValue = (double)valueRetrieval.Value;

            //                     string varName = propertyName.Replace(".", "_");

            //                     action.ModificationValue = action.ModificationValue.Replace("{" + propertyName + "}", varName);

            //                     variables.Add(varName, propertyValue);

            //                     var moreCheck = action.ModificationValue.Contains("{");
            //                     if (!moreCheck)
            //                     {
            //                         break;
            //                     }
            //                     start = action.ModificationValue.IndexOf('{', end + 1);
            //                 }

            //                 Expression e;

            //                 try
            //                 {
            //                     e = Infix.ParseOrThrow(action.ModificationValue);
            //                 }
            //                 catch (Exception ex)
            //                 {
            //                     return Result<JObject>.Failure($"Invalid modification value: {ex.Message}");
            //                 }

            //                 double result = Evaluate.Evaluate(variables, e).RealValue;
            //                 targetToken.Replace(JToken.FromObject(result));

            //                 break;
            //             case ModType.Append:
            //             case ModType.Prepend:
            //                 if (targetToken.Type == JTokenType.String)
            //                 {
            //                     targetToken.Replace(
            //                         action.ModificationType == ModType.Append
            //                             ? ((string)targetToken + action.ModificationValue)
            //                             : (action.ModificationValue + (string)targetToken));
            //                 }
            //                 else
            //                 {
            //                     return Result<JObject>.Failure($"Invalid operation {action.ModificationType} on non-string type.");
            //                 }
            //                 break;
            //             default:
            //                 return Result<JObject>.Failure($"Invalid modification type {action.ModificationType}.");
            //         }
            //     }
            //     catch (Exception ex)
            //     {
            //         return Result<JObject>.Failure($"Error while modifying field {action.TargetProperty}: {ex.Message}");
            //     }
            // }

            // return Result<JObject>.Success(JObject.FromObject(inputData));
        }